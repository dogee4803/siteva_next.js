// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  password              String?
  isTwoFactorEnabled    Boolean                 @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Account               Account[]
  answers               answers[]
  physical_fitness      physical_fitness[]
  user_data             user_data[]
  user_parameter_values user_parameter_values[]
}

model VerificationToken {
  id      String  @id @default(cuid())
  email   String
  token   String  @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String  @id @default(cuid())
  email   String
  token   String  @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id  String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model answers {
  id                       String                @id(map: "answers_pk") @default(cuid())
  user_id                  String
  question_of_interview_id String
  answer_text              String?
  type                     String?
  question_of_interview    question_of_interview @relation(fields: [question_of_interview_id], references: [id], map: "answers_question_of_interview_fk")
  type_of_answers          type_of_answers?      @relation(fields: [type], references: [id], onDelete: Restrict, map: "answers_type_of_answers_fk")
  User                     User                  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "answers_users_fk")
  options_of_answer        options_of_answer[]
}

model compare_type {
  id                String              @id(map: "compare_type_pk") @default(cuid())
  name              String
  condition_operand condition_operand[]
}

model condition_operand {
  id                                     String                                   @id(map: "condition_operand_pk") @default(cuid())
  condition_id                           String
  question_id                            String
  compare_type_id                        String
  join_type                              Boolean                                  @default(true)
  conditions                             conditions                               @relation(fields: [condition_id], references: [id], onDelete: Cascade, map: "condition_operand_fk")
  compare_type                           compare_type                             @relation(fields: [compare_type_id], references: [id], map: "condition_operand_fk_compare_type")
  question_of_interview                  question_of_interview                    @relation(fields: [question_id], references: [id], map: "condition_operand_fk_q")
  key_value_question_option_condition    key_value_question_option_condition[]
  result_value_question_option_condition result_value_question_option_condition[]
}

model conditions {
  id                    String                @id(map: "conditions_pk") @default(cuid())
  question_id           String
  description           String?               @db.VarChar
  condition_operand     condition_operand[]
  question_of_interview question_of_interview @relation(fields: [question_id], references: [id], onDelete: Cascade, map: "conditions_fk")
}

model interview {
  id                    String                  @id(map: "interview_pk") @default(cuid())
  name                  String?
  description           String?
  question_of_interview question_of_interview[]
}

model interview_question_strategy {
  id         String  @id(map: "question_strategy_pk")
  name       String?
  desciption String?
}

model key_value_question_option_condition {
  id                    String              @id(map: "key_value_condition_pk") @default(cuid())
  condition_operand_id  String
  option_of_question_id String
  condition_operand     condition_operand   @relation(fields: [condition_operand_id], references: [id], onDelete: Cascade, map: "key_value_condition_fk")
  options_of_question   options_of_question @relation(fields: [option_of_question_id], references: [id], map: "key_value_question_option_condition_fk")
}

model option_group {
  id                      String                    @id(map: "option_group_pk") @default(cuid())
  name                    String? 
  options_of_option_group options_of_option_group[]
}

model options {
  id                      String                    @id(map: "options_of_answer_pk") @default(cuid())
  text                    String?
  type                    Int?                      @db.SmallInt
  constraint              String?
  options_of_option_group options_of_option_group[]
  options_of_question     options_of_question[]
}

model options_of_answer {
  id                     String               @id(map: "oprions_of_answer_for_question_pk") @default(cuid())
  options_of_question_id String?
  answers_id             String?
  answers                answers?             @relation(fields: [answers_id], references: [id], onDelete: Restrict, map: "options_of_answer_answers_fk")
  options_of_question    options_of_question? @relation(fields: [options_of_question_id], references: [id], onDelete: Restrict, map: "options_of_answer_options_of_question_fk")
}

model options_of_option_group {
  id              String       @id(map: "options_of_option_group_pk") @default(cuid())
  option_group_id String
  option__id      String
  option_group    option_group @relation(fields: [option_group_id], references: [id], onDelete: Cascade, map: "options_of_option_group_fk_og")
  options         options      @relation(fields: [option__id], references: [id], map: "options_of_option_group_fk_opt")
}

model options_of_question {
  id                                  String                                @id(map: "options_of_question_pk") @default(cuid())
  option_id                           String
  question_id                         String
  description                         String?                               @db.VarChar
  key_value_question_option_condition key_value_question_option_condition[]
  options_of_answer                   options_of_answer[]
  options                             options                               @relation(fields: [option_id], references: [id], map: "options_of_question_fk_options")
  question                            question                              @relation(fields: [question_id], references: [id], onDelete: Cascade, map: "options_of_question_fk_question")
}

model physical_fitness {
  id_physical_fitness      String  @id(map: "physical_fitness_pk") @default(cuid())
  hang                     BigInt?
  lifting_the_torso        BigInt?
  press                    BigInt?
  time_running_1000_meters BigInt?
  push_ups                 BigInt? @map("push-ups")
  jump_from_a_place        BigInt?
  id_users                 String?
  User                     User?   @relation(fields: [id_users], references: [id], onDelete: Restrict, map: "physical_fitness_users_fk")
}

model question {
  id                    String                  @id(map: "question_pk") @default(cuid())
  name                  String?
  description           String?
  type                  Boolean?                @default(false)
  options_of_question   options_of_question[]
  question_of_interview question_of_interview[]
  question_text         question_text[]
}

model question_of_interview {
  id                String              @id(map: "question_of_interview_pk") @default(cuid())
  interview_id      String
  question_id       String
  priority          Int?
  transition_type   Int?                @db.SmallInt
  required          Boolean             @default(false)
  max_answers       Int?
  open_option_text  String?
  has_open_option   Boolean?            @default(false)
  type              Int?
  answers           answers[]
  condition_operand condition_operand[]
  conditions        conditions[]
  interview         interview           @relation(fields: [interview_id], references: [id], onDelete: Cascade, map: "question_of_interview_fk_to_interview")
  question          question            @relation(fields: [question_id], references: [id], map: "question_of_interview_fk_to_question")
}

model question_text {
  id          String   @id(map: "question_text_pk") @default(cuid())
  text        String
  question_id String
  question    question @relation(fields: [question_id], references: [id], onDelete: Cascade, map: "question_text_fk")
}

model result_value_question_option_condition {
  id                   String            @id(map: "result_value_question_option_condition_pk") @default(cuid())
  condition_operand_id String
  value                String
  condition_operand    condition_operand @relation(fields: [condition_operand_id], references: [id], onDelete: Cascade, map: "result_value_question_option_condition_fk")
}

model type_of_answers {
  id      String    @id(map: "type_of_answers_pk") @default(cuid())
  name    String    @unique(map: "type_of_answers_unique")
  answers answers[]
}

model user_data {
  id      String @id(map: "health_characteristic_pk") @default(cuid())
  user_id String 
  age     Int?
  height  Int?
  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "health_characteristic_fk")
}

model user_parameter {
  id                    String                  @id(map: "user_parameter_pk") @default(cuid())
  name                  String
  user_parameter_values user_parameter_values[]
}

model user_parameter_values {
  id                String         @id(map: "user_parameter_values_pk") @default(cuid())
  user_id           String
  user_parameter_id String
  value             String?
  User              User           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_parameter_values_fk_iser")
  user_parameter    user_parameter @relation(fields: [user_parameter_id], references: [id], map: "user_parameter_values_fk_parameter")
}
